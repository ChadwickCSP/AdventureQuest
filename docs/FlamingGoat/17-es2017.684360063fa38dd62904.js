!function(){"use strict";function e(e,t,n,r,i,o,s){try{var a=e[o](s),u=a.value}catch(h){return void n(h)}a.done?t(u):Promise.resolve(u).then(r,i)}function t(t){return function(){var n=this,r=arguments;return new Promise(function(i,o){var s=t.apply(n,r);function a(t){e(s,i,o,a,u,"next",t)}function u(t){e(s,i,o,a,u,"throw",t)}a(void 0)})}}class n{getName(e){return"Broken Escalator"}getDescription(e){return"You are standing on a broken escalator. There is a [goat] here blocking your \nway forward. The steps of the escalator lead [back] to the subway platform."}handleInput(e){var n=this;return t(function*(){const t=e,i=(yield t.getInput()).toLowerCase().trim();return"back"===i?(t.print("\nSeeing no way forward, you return to the subway platform.\n"),new r):("goat"===i?(t.print("\nThere is an angry looking goat blocking the escalator.\n"),t.print("\nThe goat looks very [hungry]. BAAAAAA!\n"),t.isGoatOnFire&&t.print("\nThe goat is on [fire].\n")):"fire"===i&&t.isGoatOnFire?t.hasSprite?(t.print("\nYou take the Spryte from your pocket and pour it over the goat. The flames go out.\n"),t.isGoatOnFire=!1):t.print("\nYep! That's a fire!\n"):"fire"!==i||t.isGoatOnFire?"hungry"===i&&t.isGoatOnFire?t.print("\nThe goat is on fire. Perhaps you should find a way to put it out.\n"):"hungry"===i&&!1===t.isGoatOnFire?(t.print("\nThe goat looks quite hungry. You hand it the empty Spryte can.\n"),t.print("The goat crunches through it in a matter of seconds. It 'BAAAAAS' happily before hopping away.\n"),t.print("You continue up the broken escalator and return home. Did that really happen?\n"),t.gameWon()):t.print("Invalid command!"):t.print("\nNo fire here!\n"),n)})()}}class r{getName(e){return"Subway Platform"}getDescription(e){return"You are standing on the subway platform. There is a broken [escalator] here\nand a vending [machine]."}handleInput(e){var r=this;return t(function*(){const t=e,i=(yield t.getInput()).toLowerCase().trim();if("escalator"===i)t.print("\nIt's broken. You'll have to [walk] up it.\n");else{if("walk"===i)return t.print("\nYou start to walk up the escalator.\n"),new n;"machine"===i?t.print("\nOh wow! It's one of those cool new Spryte machines. It has a [coin] slot. \n"):"coin"===i&&!1===t.hasSprite?(t.print("\nYou drop 4 coins into the vending machine. You hear a loud whirring sound \n"),t.print("followed by a loud *KA-CHUNK*. You reach down and pickup a Spryte.\n"),t.hasSprite=!0):t.print("coin"===i&&t.hasSprite?"\nYou already have a Spryte!\n":"Invalid command!")}return r})()}}class i extends class{constructor(){this._gameWon=!1,this._gameLost=!1}print(e,t){this.engine.print(e,t)}printTextFile(e,n){var r=this;return t(function*(){console.log("Printing: "+e),yield r.engine.printFile(e,n)})()}sleep(e){this.engine.sleep(e)}getInput(){var e=this;return t(function*(){const t=yield e.engine.getInput();return e.print(`\n> ${t}\n`),t})()}DisplayRoomName(){const e=this.room.getName(this);let t=" |",n="=-";for(let i=0;i<e.length;i++)n+=i%2==0?"=":"-";e.length%2==1?n+="-=":(n+="=-=",t="  |");let r="| "+e+t;this.print("\n"+n+"\n"),this.print(r+"\n"),this.print(n+"\n\n")}setEngine(e){this.engine=e}gameOver(){this._gameLost=!0}gameWon(){this._gameWon=!0}run(){var e=this;return t(function*(){for(e.room=yield e.onStart();!e._gameWon&&!e._gameLost;)e.DisplayRoomName(),yield e.sleep(.5),e.print(e.room.getDescription(e)+"\n"),e.room=yield e.room.handleInput(e)})()}}{constructor(){super(...arguments),this.isGoatOnFire=!0,this.hasSprite=!1}getName(){return"Flaming Goat"}getAuthor(){return"Goat Man Jones"}getDescription(){return"Can you pass the Goat's challenge?"}onStart(){var e=this;return t(function*(){return e.isGoatOnFire=!0,e.hasSprite=!1,yield e.printTextFile("FlamingGoat/title.txt"),e.print("\n                           A text adventure by Goat Man Jones\n"),e.sleep(.5),e.print("\nAfter a long day, you are the lone passenger on a subway train heading toward home.\n\n"),e.sleep(.5),e.print("It slows as it approaches your stop.\n\n"),e.sleep(.5),e.print("The doors open and you step out onto an empty platform.\n\n"),e.sleep(.5),e.print("Press Enter to continue."),yield e.getInput(),new r})()}}const o=new class{getAdventure(){return new i}};class s{constructor(e){this.TYPE="PrintMessage",this.message=e}}const a=new class{constructor(){this.fileCache=new Map,this.inputQueue=[],this.printQueue=[]}threadSleep(e){var n=this;return t(function*(){if(0==n.printQueue.length)return new Promise(t=>setTimeout(t,1e3*e));const t=n.printQueue[n.printQueue.length-1].renderAfter-(new Date).getTime()+1e3*e;return new Promise(e=>setTimeout(e,t))})()}sleep(e){const t=this.getStartTime()+1e3*e;this.printQueue.push({message:"",renderAfter:t})}getInput(){var e=this;return t(function*(){for(;0==e.inputQueue.length;)yield e.threadSleep(.1);const t=e.inputQueue.shift();return Promise.resolve(t)})()}getStartTime(){return 0==this.printQueue.length?(new Date).getTime():this.printQueue[this.printQueue.length-1].renderAfter}print(e,t=.01){const n=1e3*t;let r=this.getStartTime();for(let i=0;i<e.length;i++)r+=n,this.printQueue.push({message:e[i],renderAfter:r})}printLines(e,t){const n=1e3*t;let r=this.getStartTime();e.forEach(e=>{r+=n,this.printQueue.push({message:e+"\n",renderAfter:r})})}printFile(e,n=.1){var r=this;return t(function*(){return new Promise(t=>{if(r.fileCache.has(e)){const i=r.fileCache.get(e);return r.printLines(i,n),void t()}const i=new XMLHttpRequest,o="assets/"+e;i.addEventListener("load",s=>{let a=[];i.status>=200&&i.status<300?a=i.responseText.split("\n"):(a=[`Could not load file: "${e}". Error Code: ${i.status} - ${i.statusText}`],console.error(`Could not load: ${o}`)),r.fileCache.set(e,a),r.printLines(a,n),t()}),i.open("GET",o),i.send()})})()}startPrintThread(){var e=this;return t(function*(){for(;;){for(;0==e.printQueue.length;)yield e.threadSleep(.1);const t=(new Date).getTime();for(;e.printQueue.length>0&&e.printQueue[0].renderAfter<=t;){const t=e.printQueue.shift();postMessage(new s(t.message))}}})()}pushInput(e){this.inputQueue.push(e.message)}};addEventListener("message",({data:e})=>{if("run"===e){let e=o.getAdventure();e.setEngine(a),console.log("Starting PrintThread."),a.startPrintThread(),console.log("Starting adventure."),e.run()}else"InputMessage"==e.TYPE?a.pushInput(e):(console.error("An illegal message was received by the engine: "),console.error(e))})}();